name: CI Assignment 6

on:
  pull_request:
    types: [opened, reopened, synchronize]
    paths:
      - "packages/assignment-6/**"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with:
          version: latest
      - name: Build
        run: |
          pnpm install 
          pnpm -F assignment-6 build

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with:
          version: latest
      - name: Lint
        run: |
          pnpm install
          pnpm -F assignment-6 lint > eslint_report.txt
      - name: Lint Failure
        if: failure()
        uses: actions/github-script@v6
        with:
          github-token: ${{ github.token }}
          script: |
            const fs = require('fs')
            const eslintReport = fs.readFileSync('eslint_report.txt', 'utf8')
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `
              ## ESLint Results

              ${eslintReport}
              `
            });

  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with:
          version: latest
      - name: Testing
        run: |
          pnpm install
          pnpm -F assignment-6 test
      - name: Report Test Coverage
        if: always()
        uses: actions/github-script@v6
        with:
          github-token: ${{ github.token }}
          script: |
            const fs = require('fs');

            const coverage = JSON.parse(fs.readFileSync("packages/assignment-6/coverage/coverage-summary.json", 'utf8'));
            const totalCoverage = coverage.total;

            const coverageComment = `
            ### 커버리지 결과

            - 라인 커버리지: ${totalCoverage.lines.pct}%
            - 브랜치 커버리지: ${totalCoverage.branches.pct}%
            - 함수 커버리지: ${totalCoverage.functions.pct}%
            - 구문 커버리지: ${totalCoverage.statements.pct}%
            `;

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: coverageComment
            });

  lighthouse:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with:
          version: latest
      - name: Install Lighthouse CI
        run: |
          npm i -E -g @lhci/cli
          pnpm install
      - name: Build Local Server
        run: pnpm -F assignment-6 build
      - name: Lighthouse
        run: pnpm -F assignment-6 lighthouse
      - name: Report Lighthouse
        if: always()
        uses: actions/github-script@v6
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
        with:
          github-token: ${{ github.token }}
          script: |
            const fs = require('fs');
            # 본인의 환경에 맞게 설정해주세요
            const results = JSON.parse(fs.readFileSync("packages/assignment-6/lhci_reports/manifest.json", 'utf-8'));
            # comment를 담을 변수 입니다.
            let comments = "";

            results.forEach((result) => {
              const { summary, jsonPath } = result;
              const { audits } = details;

              const details = JSON.parse(fs.readFileSync(jsonPath));
              const formatResult = (res) => Math.round(res * 100);

              Object.keys(summary).forEach(
                (key) => (summary[key] = formatResult(summary[key]))
              );

              # 점수가 색상으로 구분되는 방식 (https://web.dev/performance-scoring/#color-coding)
              const score = (res) => (res >= 90 ? "🟢" : res >= 50 ? "🟠" : "🔴");

              const comment = [
                `⚡️ Lighthouse report!`,
                `| Category | Score |`,
                `| --- | --- |`,
                `| ${score(summary.performance)} Performance | ${summary.performance} |`,
                { ... }
              ].join("\n");

              const detail = [
                `| Category | Score |`,
                `| --- | --- |`,
                `| ${score(
                  audits["first-contentful-paint"].score * 100
                )} First Contentful Paint | ${
                  audits["first-contentful-paint"].displayValue
                } |`,
                { ... }
              ].join("\n");
              comments += comment + "\n" + detail + "\n";
            });

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comments
            });

  assign_reviewer:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with:
          version: latest
      - name: job5 구현
        run: echo "job5의 내용을 구현해주세요"
